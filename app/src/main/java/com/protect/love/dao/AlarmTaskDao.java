package com.protect.love.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.protect.love.bean.AlarmTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM_TASK".
*/
public class AlarmTaskDao extends AbstractDao<AlarmTask, String> {

    public static final String TABLENAME = "ALARM_TASK";

    /**
     * Properties of entity AlarmTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", true, "taskName");
        public final static Property IsOpen = new Property(1, boolean.class, "IsOpen", false, "IsOpen");
        public final static Property Hour = new Property(2, int.class, "hour", false, "hour");
        public final static Property Minute = new Property(3, int.class, "minute", false, "minute");
    }


    public AlarmTaskDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM_TASK\" (" + //
                "\"taskName\" TEXT PRIMARY KEY NOT NULL ," + // 0: name
                "\"IsOpen\" INTEGER NOT NULL ," + // 1: IsOpen
                "\"hour\" INTEGER NOT NULL ," + // 2: hour
                "\"minute\" INTEGER NOT NULL );"); // 3: minute
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlarmTask entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getIsOpen() ? 1L: 0L);
        stmt.bindLong(3, entity.getHour());
        stmt.bindLong(4, entity.getMinute());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlarmTask entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getIsOpen() ? 1L: 0L);
        stmt.bindLong(3, entity.getHour());
        stmt.bindLong(4, entity.getMinute());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public AlarmTask readEntity(Cursor cursor, int offset) {
        AlarmTask entity = new AlarmTask( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.getShort(offset + 1) != 0, // IsOpen
            cursor.getInt(offset + 2), // hour
            cursor.getInt(offset + 3) // minute
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlarmTask entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsOpen(cursor.getShort(offset + 1) != 0);
        entity.setHour(cursor.getInt(offset + 2));
        entity.setMinute(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AlarmTask entity, long rowId) {
        return entity.getName();
    }
    
    @Override
    public String getKey(AlarmTask entity) {
        if(entity != null) {
            return entity.getName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AlarmTask entity) {
        return entity.getName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
