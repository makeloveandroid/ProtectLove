package com.protect.love.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.protect.love.bean.AlarmTaskLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM_TASK_LOG".
*/
public class AlarmTaskLogDao extends AbstractDao<AlarmTaskLog, String> {

    public static final String TABLENAME = "ALARM_TASK_LOG";

    /**
     * Properties of entity AlarmTaskLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", true, "taskName");
        public final static Property Year = new Property(1, int.class, "year", false, "year");
        public final static Property Month = new Property(2, int.class, "month", false, "month");
        public final static Property Day = new Property(3, int.class, "day", false, "day");
        public final static Property Time = new Property(4, long.class, "time", false, "time");
        public final static Property Hour = new Property(5, int.class, "hour", false, "hour");
        public final static Property Minute = new Property(6, int.class, "minute", false, "minute");
    }


    public AlarmTaskLogDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmTaskLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM_TASK_LOG\" (" + //
                "\"taskName\" TEXT PRIMARY KEY NOT NULL ," + // 0: name
                "\"year\" INTEGER NOT NULL ," + // 1: year
                "\"month\" INTEGER NOT NULL ," + // 2: month
                "\"day\" INTEGER NOT NULL ," + // 3: day
                "\"time\" INTEGER NOT NULL ," + // 4: time
                "\"hour\" INTEGER NOT NULL ," + // 5: hour
                "\"minute\" INTEGER NOT NULL );"); // 6: minute
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM_TASK_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlarmTaskLog entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getYear());
        stmt.bindLong(3, entity.getMonth());
        stmt.bindLong(4, entity.getDay());
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getHour());
        stmt.bindLong(7, entity.getMinute());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlarmTaskLog entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getYear());
        stmt.bindLong(3, entity.getMonth());
        stmt.bindLong(4, entity.getDay());
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getHour());
        stmt.bindLong(7, entity.getMinute());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public AlarmTaskLog readEntity(Cursor cursor, int offset) {
        AlarmTaskLog entity = new AlarmTaskLog( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.getInt(offset + 1), // year
            cursor.getInt(offset + 2), // month
            cursor.getInt(offset + 3), // day
            cursor.getLong(offset + 4), // time
            cursor.getInt(offset + 5), // hour
            cursor.getInt(offset + 6) // minute
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlarmTaskLog entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setYear(cursor.getInt(offset + 1));
        entity.setMonth(cursor.getInt(offset + 2));
        entity.setDay(cursor.getInt(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
        entity.setHour(cursor.getInt(offset + 5));
        entity.setMinute(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AlarmTaskLog entity, long rowId) {
        return entity.getName();
    }
    
    @Override
    public String getKey(AlarmTaskLog entity) {
        if(entity != null) {
            return entity.getName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AlarmTaskLog entity) {
        return entity.getName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
